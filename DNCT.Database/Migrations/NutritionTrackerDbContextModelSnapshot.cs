// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NT.Database.Context;

#nullable disable

namespace NT.Ef.Database.Migrations
{
    [DbContext(typeof(NutritionTrackerDbContext))]
    partial class NutritionTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Nutrition")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NT.Database.Entities.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("FoodLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FoodLogId");

                    b.Property<Guid>("FoodNutritionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FoodNutritionId");

                    b.Property<int>("Unit")
                        .HasColumnType("int")
                        .HasColumnName("Unit");

                    b.HasKey("Id");

                    b.HasIndex("FoodLogId");

                    b.HasIndex("FoodNutritionId");

                    b.ToTable("FoodItems", "Nutrition");
                });

            modelBuilder.Entity("NT.Database.Entities.FoodLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateTime");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("DateTime");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdateTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodLogs", "Nutrition");
                });

            modelBuilder.Entity("NT.Database.Entities.FoodNutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<double>("Calories")
                        .HasColumnType("float")
                        .HasColumnName("Calories");

                    b.Property<double>("Carbs")
                        .HasColumnType("float")
                        .HasColumnName("Carbs");

                    b.Property<double>("Fat")
                        .HasColumnType("float")
                        .HasColumnName("Fat");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Measurement");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<double>("Protein")
                        .HasColumnType("float")
                        .HasColumnName("Protein");

                    b.HasKey("Id");

                    b.ToTable("FoodNutritions", "Nutrition");
                });

            modelBuilder.Entity("NT.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("Users", "Nutrition");
                });

            modelBuilder.Entity("NT.Database.Entities.FoodItem", b =>
                {
                    b.HasOne("NT.Database.Entities.FoodLog", "FoodLog")
                        .WithMany("FoodItems")
                        .HasForeignKey("FoodLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NT.Database.Entities.FoodNutrition", "FoodNutrition")
                        .WithMany()
                        .HasForeignKey("FoodNutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodLog");

                    b.Navigation("FoodNutrition");
                });

            modelBuilder.Entity("NT.Database.Entities.FoodLog", b =>
                {
                    b.HasOne("NT.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NT.Database.Entities.FoodLog", b =>
                {
                    b.Navigation("FoodItems");
                });
#pragma warning restore 612, 618
        }
    }
}
